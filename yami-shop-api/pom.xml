<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>yami-shop</artifactId>
		<groupId>com.yami.shop</groupId>
		<version>1.24.0115</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>yami-shop-api</artifactId>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!--输出目录-->
		<output.home.path>target/${artifactId}-${version}-release</output.home.path>
		<!--依赖输出目录 打包过程会将 maven 依赖的jar文件都辅助到这个目录-->
		<output.dependence.file.path>lib/</output.dependence.file.path>
		<!--jar输出目录 打包后 程序所在目录-->
		<output.jar.file.path>bin/</output.jar.file.path>
		<!--配置文件输出目录 配置文件将输出到这个目录-->
		<output.resource.file.path>config/</output.resource.file.path>
		<!--页面目录 页面等静态资源到这个目录-->
		<output.web.file.path>webapp/</output.web.file.path>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.yami.shop</groupId>
			<artifactId>yami-shop-service</artifactId>
			<version>${yami.shop.version}</version>
		</dependency>
		<dependency>
			<groupId>com.yami.shop</groupId>
			<artifactId>yami-shop-security-api</artifactId>
			<version>${yami.shop.version}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- 这个插件打的包是单独运行的包含依赖文件体积较大 -->
			<!--<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<layers>
						<enabled>true</enabled>
					</layers>
				</configuration>
			</plugin>

			<!-- 打JAR包，不包含依赖文件；显式剔除配置文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<!-- 只打包Java文件 不打包配置文件 -->
					<classesDirectory>target/classes/</classesDirectory>
					<!--${env.LEARN_HOME}为项目配置的环境变量，下同-->
					<outputDirectory>${output.home.path}/${output.jar.file.path}</outputDirectory>
					<!-- 将配置文件排除在jar包 -->
					<excludes>
						<exclude>/public/**</exclude>
						<exclude>/tpl/**</exclude>
						<exclude>/logback/**</exclude>
						<exclude>*.properties</exclude>
						<exclude>*.yml</exclude>
						<exclude>*.xml</exclude>
						<exclude>*.txt</exclude>
						<exclude>*.png</exclude>
						<exclude>*.js</exclude>
						<exclude>*.css</exclude>
						<exclude>*.ftl</exclude>
						<exclude>*.html</exclude>
						<exclude>*.gif</exclude>
						<exclude>*.jpeg</exclude>
						<exclude>*.jpg</exclude>
					</excludes>
					<archive>
						<!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
						<addMavenDescriptor>true</addMavenDescriptor>
						<!-- 生成MANIFEST.MF的设置 -->
						<manifest>
							<!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库 下面可能会有多个包，并且只有一个是正确的，
                            其余的可能是带时间戳的，此时会在classpath下面把那个带时间戳的给添加上去，然后我们 在依赖打包的时候，
                            打的是正确的，所以两头会对不上，报错。 -->
							<useUniqueVersions>false</useUniqueVersions>
							<!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
							<addClasspath>true</addClasspath>
							<!-- MANIFEST.MF 中 Class-Path 各个依赖加入前缀 -->
							<!--这个jar所依赖的jar包添加classPath的时候的前缀，需要 下面maven-dependency-plugin插件补充-->
							<!--一定要找对目录，否则jar找不到依赖lib，前边加../是因为jar在bin下，而bin与lib是平级目录-->
							<classpathPrefix>../${output.dependence.file.path}</classpathPrefix>
							<!--指定jar启动入口类 -->
							<mainClass>com.yami.shop.api.ApiApplication</mainClass>
						</manifest>
						<manifestEntries>
							<!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把 这些资源文件打进包里面，这个时候你必须在
                            这边额外指定一些这些资源文件的路径,假如你的pom文件里面配置了 <scope>system</scope>,就是你依赖是你本地的
                            资源，这个时候使用这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进这个地方 -->
							<!--MANIFEST.MF 中 Class-Path 加入自定义路径，多个路径用空格隔开 -->
							<!--此处resources文件夹的内容，需要maven-resources-plugin插件补充上-->
							<Class-Path>../${output.web.file.path} ../${output.resource.file.path}</Class-Path>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<!-- 复制依赖的jar包到指定的文件夹里 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- 拷贝项目依赖包到指定目录下 -->
							<outputDirectory>${output.home.path}/${output.dependence.file.path}</outputDirectory>
							<!-- 是否排除间接依赖，间接依赖也要拷贝 -->
							<excludeTransitive>false</excludeTransitive>
							<!-- 是否忽略版本号 -->
							<stripVersion>false</stripVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 用于复制指定的文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<!-- 复制spring和程序的配置文件 如果添加其他格式的配置文件需要再 includes中添加对应的格式-->
					<execution>
						<id>copy-resource</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<!--将如下格式配置文件拷贝-->
										<include>*.properties</include>
										<include>*.yml</include>
										<include>*.xml</include>
										<include>*.txt</include>
										<include>logback/*</include>
									</includes>
								</resource>
							</resources>
							<!--输出路径-->
							<outputDirectory>${output.home.path}/${output.resource.file.path}</outputDirectory>
						</configuration>
					</execution>

					<!-- 复制web页面 静态资源文件和模板文件 -->
					<execution>
						<id>copy-webapp</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
									</includes>
									<excludes>
										<exclude>*.properties</exclude>
										<exclude>*.yml</exclude>
										<exclude>*.xml</exclude>
										<exclude>*.txt</exclude>
										<exclude>logback/*</exclude>
									</excludes>
								</resource>
							</resources>
							<!--输出路径-->
							<outputDirectory>${output.home.path}/${output.web.file.path}</outputDirectory>
						</configuration>
					</execution>


					<!-- 复制服务启动脚本 -->
					<execution>
						<id>copy-script</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>script</directory>
									<includes>
									</includes>
									<excludes>
									</excludes>
									<filtering>false</filtering>
								</resource>
							</resources>
							<!-- 脚本文件输出路径  程序主目录 -->
							<outputDirectory>${output.home.path}</outputDirectory>
							<overwrite>true</overwrite>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>


	<repositories>
		<repository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
		<repository>
			<id>nexus-aliyun</id>
			<name>nexus-aliyun</name>
			<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>jitpack.io</id>
			<name>jitpack.io</name>
			<url>https://jitpack.io</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>
</project>
